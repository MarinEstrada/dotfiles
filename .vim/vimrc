" Initializing plugs
call plug#begin('~/.vim/plugged')

" Js support vim-jsx
Plug 'mxw/vim-jsx'

"plugin to autocomplete parenthesis
Plug 'tmsvg/pear-tree'

"to surround selected text with ''/{}/etc
Plug 'tpope/vim-surround'

" add visual indentation lines
Plug 'Yggdroot/indentLine'

"attempt to imporove js/jsx indentation
Plug 'maxmellon/vim-jsx-pretty'

"Note -> plug 'pangloss/vim-javascrict needs to be disabled to use chemzqm/vim-jsx-improve
"Plug 'pangloss/vim-javascript'
"
"imporove indentation: need to disable vim-javascript plugin to function
" note ->  added 'let g:jsx_improve_javascriptreact = 0' to botom of file
Plug 'chemzqm/vim-jsx-improve'

"Nerdtree
"Note 'let' to allow Nerdtree to show hidden files at the bottom
Plug 'scrooloose/nerdtree'

"A light & configuragble statusline/tabline plugin
"eg: makes the status more apparent between insert/normal/visual/replace
Plug 'itchyny/lightline.vim'

"Initialize plugin system
call plug#end()

set nocompatible	"We're running vim, no vi!
syntax on		"Enable syntax highlighting
filetype on		"enable filetype tetection\
filetype indent on 	"Enable filetype-specificintening
filetype plugin on 	"Enable filetype=specific plugins
        " to set colors, donwload from vimcolors.com
        " save them to .vim/colors
colorscheme monokai-bold

        "
set colorcolumn=90
set number
set nowrap
"makes tab key = x spaces (defined by tabstop)
set expandtab
"makes tab key = 4 spaces
set tabstop=4
" makes smart indent indent at 4
set shiftwidth=4
set smartindent
"makes tab key (in insert mode ) insert spaces/tabs to the next indent of the
"next tabstop (only if preceding char is whitespace
set smarttab
set autoindent
        "speed things up by setting more info in memory
set hidden
set history=100
set showmatch 		"shows the matching parenthesis
        "map for esc to jk
":imap jk <Esc>
        "fonts for vim and siz

        "fonts for vim and size
"set guifont=Menlo\ Regular:h14
"
set hlsearch            "highlights search results
set cursorline          "hightlights the line
set cursorcolumn          "hightlights the column
set mouse=a             "allows use of mouse
"set relativenumber
"let maplearder = " "
set incsearch

"Gets rid of annoying bell sound"
set visualbell
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab


"show whitespace characters
"to add more, add comma. eg: ...+=trail:█,space:·
"note that: alt 170 = ¬, alt 219 = █, alt 0149 = •, alt 250 = ·
set listchars+=trail:█
set list
" edit whitespace char color of 'SpecialKey'as defined above,
" note: colors may not matchup with designed color based on backround.
" See :help ctermfg and :help guifg
" Forground for Terminal (ctermfg) U graphical client (guifg)
"note that 8 = dark grey, 13 = magenta
highlight SpecialKey ctermfg=8
"set special group MyTrail with unique highlight color
highlight MyTrail ctermfg=13
"have MyTrail match trailing char except when typing at
"the end of a line!
"when typing at end of the line, colour is same as SpecialKey
match MyTrail /\s\+\%#\@<!$/


"uncomment line below to disable javascript react support for vim-jsx- imporve
"let g:jsx_improve_javascriptreact = 0

"to allow showing of hidden files
let NERDTreeShowHidden=1

"for Plug 'tmsvg/pear-tree'
"does not let plug temporarily delte second bracket upon <cr>
"note: ruins '.' repeatability, re undo comment out line below
let g:pear_tree_repeatable_expand = 0

"leader key allows short cuts in vim
"you can map your leader key to whatever you want
"HINT make it a key you don't use often
let mapleader = " "
"Leader mappings
nnoremap <leader>t :NERDTreeToggle<enter>
nnoremap <leader>y :NERDTree<enter>
"move left and right screens
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
"move top and bottom screens
nnoremap <leader>k <C-w>k
nnoremap <leader>j <C-w>j
"resize window -> +/- 10 columns wider/thiner
nnoremap <leader>- :vertical resize -10<enter>
nnoremap <leader>= :vertical resize +10<enter>
"resize window -> +/- 5 lines taller or shorter
nnoremap <leader>_ :resize -5<enter>
nnoremap <leader>+ :resize +5<enter>


"WSL yank support to allow yanking into windows clipboard
let s:clip = '/mnt/c/Windows/System32/clip.exe'  "change this path according to your mount point
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif
